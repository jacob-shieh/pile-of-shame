buildscript {
    ext.spring_boot_version = "2.1.3.RELEASE"
    ext.kotlin_version = "1.3.21"
	ext.hibernate_version = "5.4.1.Final"

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
		classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
    }
}

plugins {
	id 'org.springframework.boot' version '2.1.3.RELEASE'
	id 'org.jetbrains.kotlin.jvm' version '1.3.21'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.3.21'\
}

apply plugin: 'java'
apply plugin: 'kotlin-spring'
apply plugin: "kotlin-allopen"
apply plugin: "kotlin-noarg"
apply plugin: "kotlin-jpa"
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.affjj'
version = '0.0.1-SNAPSHOT'

java {
	targetCompatibility = JavaVersion.VERSION_11
	sourceCompatibility = JavaVersion.VERSION_11
	if (JavaVersion.current() != targetCompatibility) {
		throw new GradleException("The java version used ${JavaVersion.current()} is not the expected version $targetCompatibility.")
	}
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		jvmTarget = JavaVersion.VERSION_1_8.toString()
		allWarningsAsErrors = true
		freeCompilerArgs = ['-Xjsr305=strict']
	}
}

wrapper {
    gradleVersion = "5.2"
	distributionType = Wrapper.DistributionType.ALL
}

allOpen {
	annotation("javax.persistence.Entity")
	annotation("javax.persistence.MappedSuperclass")
	annotation("javax.persistence.Embeddable")
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

ext {
	set('springCloudVersion', 'Greenwich.RELEASE')
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-cache'
//	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-integration'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compile "org.springframework.boot:spring-boot-starter-data-jpa"
	compile "org.hibernate:hibernate-core:$hibernate_version"
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
	implementation 'org.springframework.cloud:spring-cloud-starter-oauth2'
	implementation 'org.springframework.session:spring-session-core'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

// kotlin-gradle-plugin must be applied for configuration below to work
// (see https://kotlinlang.org/docs/reference/using-gradle.html)

repositories {
	jcenter()
}

configurations {
	ktlint
}

dependencies {
	ktlint "com.github.shyiko:ktlint:0.30.0"
	// additional 3rd party ruleset(s) can be specified here
	// just add them to the classpath (e.g. ktlint 'groupId:artifactId:version') and
	// ktlint will pick them up
}

task ktlint(type: JavaExec, group: "verification") {
	description = "Check Kotlin code style."
	classpath = configurations.ktlint
	main = "com.github.shyiko.ktlint.Main"
	args "src/**/*.kt"
	// to generate report in checkstyle format prepend following args:
	// "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
	// see https://github.com/shyiko/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
	description = "Fix Kotlin code style deviations."
	classpath = configurations.ktlint
	main = "com.github.shyiko.ktlint.Main"
	args "-F", "src/**/*.kt"
}
